// Copyright 2022 The Gidari Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
package gidari

import (
	"net/url"
	"time"

	"github.com/alpstable/gidari/proto"
	"github.com/sirupsen/logrus"
	"golang.org/x/time/rate"
)

// APIKey is one method of HTTP(s) transport that requires a passphrase, key, and secret.
type APIKey struct {
	Passphrase string `yaml:"passphrase"`
	Key        string `yaml:"key"`
	Secret     string `yaml:"secret"`
}

// Auth2 is a struct that contains the authentication data for a web API that uses OAuth2.
type Auth2 struct {
	Bearer string `yaml:"bearer"`
}

// Authentication is the credential information to be used to construct an HTTP(s) transport for accessing the API.
type Authentication struct {
	APIKey *APIKey `yaml:"apiKey"`
	Auth2  *Auth2  `yaml:"auth2"`
}

type StorageOptions struct {
	Storage proto.Storage

	// ConnectionString is the URI to connect to the database. This is only valid using the CLI.
	ConnectionString *string `yaml:"connectionString"`

	// Database is the name of the database to run operations against. This is an optional field.
	Database *string `yaml:"database"`
}

// RateLimitConfig is the data needed for constructing a rate limit for the HTTP requests.
type RateLimitConfig struct {
	// Burst represents the number of requests that we limit over a period frequency.
	Burst *int `yaml:"burst"`

	// Period is the number of times to allow a burst per second.
	Period *time.Duration `yaml:"period"`
}

func (rl RateLimitConfig) validate() error {
	if rl.Burst == nil {
		return MissingRateLimitFieldError("burst")
	}

	if rl.Period == nil {
		return MissingRateLimitFieldError("period")
	}

	return nil
}

// Timeseries is a struct that contains the information needed to query a web API for Timeseries data.
type Timeseries struct {
	StartName string `yaml:"startName"`
	EndName   string `yaml:"endName"`

	// Period is the size of each chunk in seconds for which we can query the API. Some API will not allow us to
	// query all data within the start and end range.
	Period int32 `yaml:"period"`

	// Layout is the time layout for parsing the "Start" and "End" values into "time.Time". The default is assumed
	// to be RFC3339.
	Layout *string `yaml:"layout"`

	// Chunks are the time ranges for which we can query the API. These are broken up into pieces for API requests
	// that only return a limited number of results.
	Chunks [][2]time.Time
}

// Request is the information needed to query the web API for data to transport.
type Request struct {
	// Method is the HTTP(s) method used to construct the http request to fetch data for storage.
	Method string `yaml:"method"`

	// Endpoint is the fragment of the URL that will be used to request data from the API. This value can include
	// query parameters.
	Endpoint string `yaml:"endpoint"`

	// Query represent the query params to apply to the URL generated by the request.
	Query map[string]string

	// Timeseries indicates that the underlying data should be queries as a time series. This means that the
	Timeseries *Timeseries `yaml:"timeseries"`

	// Table is the name of the table/collection to insert the data fetched from the web API.
	Table string `yaml:"table"`

	// Truncate before upserting on single request
	Truncate *bool `yaml:"truncate"`

	ClobColumn string `yaml:"clobColumn"`

	// Chunks of requests should share a rate limiter, probably all of them; inheriting the rate limiter from the
	// root configuration.
	RateLimiter *rate.Limiter
}

// Config is the configuration used to query data from the web using HTTP requests and storing that data using
// the repositories defined by the "ConnectionStrings" list.
type Config struct {
	RawURL          string           `yaml:"url"`
	Authentication  Authentication   `yaml:"authentication"`
	Requests        []*Request       `yaml:"requests"`
	RateLimitConfig *RateLimitConfig `yaml:"rateLimit"`
	StorageOptions  []StorageOptions `yaml:"storage"`

	Logger         *logrus.Logger
	StgConstructor proto.Constructor
	Truncate       bool

	URL *url.URL `yaml:"-"`
}

// Validate will ensure that the configuration is valid for querying the web API.
func (cfg *Config) Validate() error {
	if cfg.RateLimitConfig == nil {
		return MissingConfigFieldError("rateLimit")
	}

	if err := cfg.RateLimitConfig.validate(); err != nil {
		return ErrInvalidRateLimit
	}

	return nil
}
